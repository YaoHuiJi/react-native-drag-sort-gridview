var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _react=_interopRequireDefault(require("react"));var _reactNative=require("react-native");var _reactNativeReanimated=_interopRequireDefault(require("react-native-reanimated"));var _styles=_interopRequireDefault(require("./styles"));var _useDraggableItemHooks=_interopRequireDefault(require("./useDraggableItemHooks"));var _usePanResponderViewHooks=_interopRequireDefault(require("./usePanResponderViewHooks"));var _useReanimHooks2=_interopRequireDefault(require("./useReanimHooks"));var _jsxRuntime=require("react/jsx-runtime");var _this=this,_jsxFileName="/Users/stanley/rn/module/react-native-drag-sort-gridview/src/components/DraggableItem.tsx";var DraggableItem=function DraggableItem(_ref){var children=_ref.children,style=_ref.style,itemWidth=_ref.itemWidth,itemHeight=_ref.itemHeight,numColumns=_ref.numColumns,isEditing=_ref.isEditing,index=_ref.index,dragItemOriginIndex=_ref.dragItemOriginIndex,dragItemTargetIndex=_ref.dragItemTargetIndex,animMoveDuration=_ref.animMoveDuration,onStartDrag=_ref.onStartDrag,updateDragToIndex=_ref.updateDragToIndex,onEndDrag=_ref.onEndDrag;var _useDraggableItemHook=(0,_useDraggableItemHooks.default)({index:index,dragItemOriginIndex:dragItemOriginIndex}),isDragging=_useDraggableItemHook.isDragging;var _useReanimHooks=(0,_useReanimHooks2.default)({itemWidth:itemWidth,itemHeight:itemHeight,numColumns:numColumns,isEditing:isEditing,isDragging:isDragging,index:index,dragItemOriginIndex:dragItemOriginIndex,dragItemTargetIndex:dragItemTargetIndex,animMoveDuration:animMoveDuration}),animatedStyles=_useReanimHooks.animatedStyles;var _usePanResponderViewH=(0,_usePanResponderViewHooks.default)({itemWidth:itemWidth,itemHeight:itemHeight,numColumns:numColumns,index:index,isEditing:isEditing,onStartDrag:onStartDrag,updateDragToIndex:updateDragToIndex,onEndDrag:onEndDrag}),panResponder=_usePanResponderViewH.panResponder,dragXAnim=_usePanResponderViewH.dragXAnim,dragYAnim=_usePanResponderViewH.dragYAnim;return(0,_jsxRuntime.jsx)(_reactNative.Animated.View,{style:[style,_styles.default.wrapper,{width:itemWidth,height:itemHeight},{transform:[{translateX:dragXAnim},{translateY:dragYAnim}]},isDragging&&_styles.default.dragging],children:(0,_jsxRuntime.jsx)(_reactNativeReanimated.default.View,Object.assign({},panResponder.panHandlers,{style:animatedStyles,children:children}))});};var _default=DraggableItem;exports.default=_default;
//# sourceMappingURL=DraggableItem.js.map